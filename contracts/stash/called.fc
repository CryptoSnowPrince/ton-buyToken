#include "stdlib.fc";

(int) load_data() inline {                 ;; read function declaration - returns int as result
  var ds = get_data().begin_parse();       ;; load the storage cell and start parsing as a slice
  return (ds~load_uint(64));               ;; read a 64 bit unsigned int from the slice and return it
}

() save_data(int testVal) impure inline {  ;; write function declaration - takes an int as arg
  set_data(
    begin_cell()                    ;; store the storage cell and create it with a builder 
    .store_uint(testVal, 64)               ;; write a 64 bit unsigned int to the builder
    .end_cell()
  );                          ;; convert the builder to a cell
}

(int) get_testVal() method_id {        ;; getter declaration - returns int as result
  var testVal = load_data();
  return (testVal);
}

() set_testVal (int newVal) impure {
  save_data(newVal);
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {  ;; well known function signature
  ;; var cs = in_msg.begin_parse();
  int op = in_msg_body~load_uint(64);                                     ;; parse the operation type encoded in the beginning of msg body
  int newVal = in_msg_body~load_uint(64);                                     ;; parse the operation type encoded in the beginning of msg body
  if (op == 1) {                                                          ;; handle op #1 = set admin
    set_testVal(newVal);
    return ();
  }
}
